// Generated by CoffeeScript 1.9.3
(function() {
  (function() {
    var BITS, BUF, CONST, NUM32, NUM64, REG, exports, finishInPlace, hashArrayBuffer, hashDate, hashFloat32, hashFloat64, hashInPlace, hashInt32, hashInt64, hashNumber, hashString, hashTypedArray, imul, root;
    BUF = new ArrayBuffer(8);
    NUM32 = new Float32Array(BUF);
    NUM64 = new Float64Array(BUF);
    BITS = new Uint32Array(BUF);
    REG = new Uint32Array(4);
    CONST = new Uint32Array(8);
    CONST[0] = 0xCC9E2D51;
    CONST[1] = 0x1B873593;
    CONST[2] = 5;
    CONST[3] = 0xE6546B64;
    CONST[4] = 0x85EBCA6B;
    CONST[5] = 0xC2B2AE35;
    CONST[6] = 0xDEADBEEF;
    CONST[7] = 0xFFFFFFFF;
    imul = Math.imul || function(a, b) {
      return a * b;
    };
    hashInPlace = function() {
      REG[0] = imul(REG[0], CONST[0]);
      REG[2] = REG[0] << 15;
      REG[3] = REG[0] >>> -15;
      REG[0] = REG[2] | REG[3];
      REG[0] = imul(REG[0], CONST[1]);
      REG[1] ^= REG[0];
      REG[2] = REG[1] << 13;
      REG[3] = REG[1] >>> -13;
      REG[1] = REG[2] | REG[3];
      REG[1] = imul(REG[1], CONST[2]);
      REG[1] += CONST[3];
    };
    finishInPlace = function() {
      REG[2] = REG[1] >>> 16;
      REG[1] ^= REG[2];
      REG[1] = imul(REG[1], CONST[4]);
      REG[2] = REG[1] >>> 13;
      REG[1] ^= REG[2];
      REG[1] = imul(REG[1], CONST[5]);
      REG[2] = REG[1] >>> 16;
      REG[1] ^= REG[2];
    };
    hashNumber = function(number) {
      if (0 === (number % 1)) {
        if (CONST[7] > number) {
          return hashInt32(number);
        } else {
          return hashInt64(number);
        }
      } else {
        return hashFloat64(number);
      }
    };
    hashInt32 = function(number) {
      REG[1] = CONST[6];
      REG[0] = number;
      hashInPlace();
      finishInPlace();
      return REG[1];
    };
    hashInt64 = function(number) {
      var s;
      REG[1] = CONST[6];
      s = number.toString(16);
      REG[0] = parseInt("0x" + (s.slice(0, 8)));
      hashInPlace();
      REG[0] = parseInt("0x" + (s.slice(8)));
      hashInPlace();
      finishInPlace();
      return REG[1];
    };
    hashFloat32 = function(number) {
      REG[1] = CONST[6];
      NUM32[0] = number;
      REG[0] = BITS[0];
      hashInPlace();
      finishInPlace();
      return REG[1];
    };
    hashFloat64 = function(number) {
      REG[1] = CONST[6];
      NUM64[0] = number;
      REG[0] = BITS[0];
      hashInPlace();
      REG[0] = BITS[1];
      hashInPlace();
      finishInPlace();
      return REG[1];
    };
    hashDate = function(date) {
      return hashInt64(date.getTime());
    };
    hashString = function(string) {
      var i, j, length, ref;
      REG[1] = CONST[6];
      length = string.length;
      for (i = j = 0, ref = length; j < ref; i = j += 1) {
        REG[0] = string.charAt(i);
        hashInPlace();
      }
      REG[1] ^= length;
      finishInPlace();
      return REG[1];
    };
    hashTypedArray = function(array) {
      return hashArrayBuffer(array.buffer);
    };
    hashArrayBuffer = function(buffer) {
      var bytes, i, j, length, ref;
      REG[1] = CONST[6];
      bytes = new Uint8Array(buffer);
      length = bytes.length;
      for (i = j = 0, ref = length; j < ref; i = j += 1) {
        REG[0] = bytes[i];
        hashInPlace();
      }
      REG[1] ^= length;
      finishInPlace();
      return REG[1];
    };
    root = typeof self === 'object' && self.self === self && self || typeof global === 'object' && global.global === global && global || this;
    if ((typeof module !== "undefined" && module !== null) && !module.nodeType) {
      exports = module.exports = {};
    } else {
      exports = root.murmurhash = {};
    }
    exports["hashNumber"] = hashNumber;
    exports["hashInt32"] = hashInt32;
    exports["hashInt64"] = hashInt64;
    exports["hashFloat32"] = hashFloat32;
    exports["hashFloat64"] = hashFloat64;
    exports["hashDate"] = hashDate;
    exports["hashString"] = hashString;
    exports["hashTypedArray"] = hashTypedArray;
    return exports["hashArrayBuffer"] = hashArrayBuffer;
  })();

}).call(this);
